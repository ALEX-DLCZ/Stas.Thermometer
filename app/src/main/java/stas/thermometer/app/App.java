/*
  This Java source file was generated by the Gradle 'init' task.
 */
package stas.thermometer.app;

import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import stas.thermometer.app.personalExceptions.fatalException;
import stas.thermometer.domains.AggregatorMain;
import stas.thermometer.infrastructures.database.MainDataBase;
import stas.thermometer.presentations.MainPresenter;
import stas.thermometer.views.MainView;

// Dépendances propres
import java.util.concurrent.*;

public class App {

    /**
     * --NOTE--
     * <p>
     * prévoit une évolution de maintenabilité du code
     * ex : pression atmosphérique, rayonnement thermique, vitesse du vent, Conductivité thermique.
     * (créer un probe "ProbeNom", imp MsgCurrent + imp MsgAlert, implémenter dans ValueType et c'est tout ... normalement)
     * <p>
     * <p>
     * gradlew run --args="--config-file config.ini"
     * <p>
     * <p>
     * <p>
     * -- Table 'Mesures'
     * CREATE TABLE Mesures (
     *                          id INT AUTO_INCREMENT PRIMARY KEY,
     *                          thermometerName VARCHAR(255) NOT NULL,
     *                          datetime DATETIME NOT NULL,
     *                          type VARCHAR(50) NOT NULL,
     *                          format VARCHAR(50) NOT NULL,
     *                          value DOUBLE NOT NULL
     * );
     *
     * -- Table 'Alerts'
     * CREATE TABLE Alerts (
     *                         id INT AUTO_INCREMENT PRIMARY KEY,
     *                         expectedValue DOUBLE NOT NULL,
     *                         idMesure INT NOT NULL,
     *                         FOREIGN KEY (idMesure) REFERENCES Mesures(id)
     * );
     */

    private static final Logger LOG = LogManager.getLogger("stas");

    public static void main(String[] args) {

        var scheduledExecutor = Executors.newSingleThreadScheduledExecutor();
        try {
            ArgsExecutor argsExecutor = new ArgsExecutor(args);
            for ( AggregatorMain aggregator : argsExecutor.getAggregators() ) {
                argsExecutor.getThermometer().Subscribe(aggregator);
            }

            MainView mainView = new MainView();
            MainPresenter mainPresenter = new MainPresenter(mainView, argsExecutor.getThermometer(), argsExecutor.getFormatmap());
            new MainDataBase(argsExecutor.getConnectionString(), argsExecutor.getThermometer(), argsExecutor.getFormatmap());


            var task = new RefreshProbeTask(mainPresenter);
            scheduledExecutor.scheduleAtFixedRate(task, 0, 100, TimeUnit.MILLISECONDS);

            mainPresenter.Start();

        } catch ( fatalException e ) {
            LOG.fatal(e.getMessage());
        } finally {
            scheduledExecutor.shutdown();
        }

    }

}

/**
 * Représente une boucle principale à demander un rafraichissement de la sonde.
 */
class RefreshProbeTask implements Runnable {
    private final MainPresenter mainPresenter;

    public RefreshProbeTask(MainPresenter mainPresenter) {
        this.mainPresenter = mainPresenter;
    }

    @Override
    public void run() {
        mainPresenter.onUpdate();
    }

}
